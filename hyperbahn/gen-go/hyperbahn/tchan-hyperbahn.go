// @generated Code generated by thrift-gen. Do not modify.

// Package hyperbahn is generated code used to make or handle TChannel calls using Thrift.
package hyperbahn

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanHyperbahn is the interface that defines the server handler and client interface.
type TChanHyperbahn interface {
	Discover(ctx thrift.Context, query *DiscoveryQuery) (*DiscoveryResult_, error)
}

// Implementation of a client and service handler.

type tchanHyperbahnClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanHyperbahnInheritedClient(thriftService string, client thrift.TChanClient) *tchanHyperbahnClient {
	return &tchanHyperbahnClient{
		thriftService,
		client,
	}
}

// NewTChanHyperbahnClient creates a client that can be used to make remote calls.
func NewTChanHyperbahnClient(client thrift.TChanClient) TChanHyperbahn {
	return NewTChanHyperbahnInheritedClient("Hyperbahn", client)
}

func (c *tchanHyperbahnClient) Discover(ctx thrift.Context, query *DiscoveryQuery) (*DiscoveryResult_, error) {
	var resp HyperbahnDiscoverResult
	args := HyperbahnDiscoverArgs{
		Query: query,
	}
	success, err := c.client.Call(ctx, c.thriftService, "discover", &args, &resp)
	if err == nil && !success {
		if e := resp.NoPeersAvailable; e != nil {
			err = e
		}
		if e := resp.InvalidServiceName; e != nil {
			err = e
		}
	}

	return resp.GetSuccess(), err
}

type tchanHyperbahnServer struct {
	handler TChanHyperbahn

	interceptors []thrift.Interceptor
}

// NewTChanHyperbahnServer wraps a handler for TChanHyperbahn so it can be
// registered with a thrift.Server.
func NewTChanHyperbahnServer(handler TChanHyperbahn) thrift.TChanServer {
	return &tchanHyperbahnServer{
		handler: handler,
	}
}

func (s *tchanHyperbahnServer) Service() string {
	return "Hyperbahn"
}

func (s *tchanHyperbahnServer) Methods() []string {
	return []string{
		"discover",
	}
}

// RegisterInterceptors registers the provided interceptors with the server.
func (s *tchanHyperbahnServer) RegisterInterceptors(interceptors ...thrift.Interceptor) {
	if s.interceptors == nil {
		interceptorsLength := len(interceptors)
		s.interceptors = make([]thrift.Interceptor, interceptorsLength, interceptorsLength)
	}

	s.interceptors = append(s.interceptors, interceptors...)
}

func (s *tchanHyperbahnServer) callInterceptorsPre(ctx thrift.Context, method string, args athrift.TStruct) error {
	if s.interceptors == nil {
		return nil
	}
	var firstErr error
	for _, interceptor := range s.interceptors {
		err := interceptor.Pre(ctx, method, args)
		if err != nil && firstErr == nil {
			firstErr = err
		}
	}
	return firstErr
}

func (s *tchanHyperbahnServer) callInterceptorsPost(ctx thrift.Context, method string, args, response athrift.TStruct, err error) error {
	if s.interceptors == nil {
		return err
	}
	transformedErr := err
	for _, interceptor := range s.interceptors {
		transformedErr = interceptor.Post(ctx, method, args, response, transformedErr)
	}
	return transformedErr
}

func (s *tchanHyperbahnServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "discover":
		return s.handleDiscover(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanHyperbahnServer) handleDiscover(ctx thrift.Context, protocol athrift.TProtocol) (handled bool, resp athrift.TStruct, err error) {
	var req HyperbahnDiscoverArgs
	var res HyperbahnDiscoverResult
	serviceMethod := "discover.Discover"

	defer func() {
		if uncaught := recover(); uncaught != nil {
			err = thrift.PanicErr{Value: uncaught}
		}
		err = s.callInterceptorsPost(ctx, serviceMethod, &req, resp, err)
		if err != nil {
			switch v := err.(type) {
			case *NoPeersAvailable:
				if v == nil {
					resp = nil
					err = fmt.Errorf("Handler for noPeersAvailable returned non-nil error type *NoPeersAvailable but nil value")
				}
				res.NoPeersAvailable = v
				err = nil
			case *InvalidServiceName:
				if v == nil {
					resp = nil
					err = fmt.Errorf("Handler for invalidServiceName returned non-nil error type *InvalidServiceName but nil value")
				}
				res.InvalidServiceName = v
				err = nil
			default:
				resp = nil
			}
		}
	}()

	if readErr := req.Read(protocol); readErr != nil {
		return false, nil, readErr
	}

	err = s.callInterceptorsPre(ctx, serviceMethod, &req)
	if err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Discover(ctx, req.Query)

	if err == nil {
		res.Success = r
	}

	return err == nil, &res, err
}
