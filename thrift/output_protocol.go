package thrift

import (
	"errors"
	"log"

	"golang.org/x/net/context"

	"github.com/apache/thrift/lib/go/thrift"
	tchannel "github.com/uber/tchannel/golang"
)

// TChanOutboundOptions are parameters passed to the underlying tchannel when making requests.
type TChanOutboundOptions struct {
	// Context is the context.Context with timeout and deadline information.
	Context context.Context

	// Dst is the host:port of the service to call.
	Dst string

	// AutobahnService is the Autobahn service name.
	AutobahnService string

	// ThriftService is the Thrift service name.
	ThriftService string
}

// outProtocol is a TProtocol that is used to make requests to other servers using Thrift.
type outProtocol struct {
	*protocol

	tchan   *tchannel.Channel
	options *TChanOutboundOptions

	// call is the current call.
	call *tchannel.OutboundCall

	// seqID is thrift's sequence ID, which we store when a call is made, and return on Read.
	// This is a hack to get around the thrift client checking the sequence ID.
	seqID int32
}

// NewTChanOutbound returns a protocol that can used to instantiate a thrift client
// that communicates over tchannel.
// Note: The returned protocol must be used as the input *and* output protocol.
func NewTChanOutbound(tchan *tchannel.Channel, options *TChanOutboundOptions) thrift.TProtocol {
	return &outProtocol{
		protocol: newProtocol(),
		tchan:    tchan,
		options:  options,
	}
}

// newArg creates channels for reading/writing a new argumenp.
func (p *outProtocol) createArg() (readerWriterArg, chan struct{}) {
	updated := make(chan struct{})
	errC := make(chan error)

	p.errC = errC
	return readerWriterArg{
		transport: p.transport,
		updated:   updated,
		err:       errC,
	}, updated
}

func (p *outProtocol) beginCall(method string) (*tchannel.OutboundCall, error) {
	opts := p.options
	return p.tchan.BeginCall(opts.Context, opts.Dst, opts.AutobahnService, opts.ThriftService+"::"+method, &tchannel.CallOptions{
		Format: tchannel.Thrift,
	})
}

// WriteMessageBegin begins the outgoing call over Thrift. The underlying binary protocol is not
// called, since the tchannel protocol sends method metadata separately.
func (p *outProtocol) WriteMessageBegin(name string, _ thrift.TMessageType, seqID int32) error {
	var err error

	// Thrift's autogenerated client checks the sequence ID, so we store it in-memory since we don't
	// actually send it over the wire.
	p.seqID = seqID

	if p.call, err = p.beginCall(name); err != nil {
		return err
	}
	if err = p.call.WriteArg2(nullArg{}); err != nil {
		return err
	}

	return p.writeArg3(p.call)
}

// WriteMessageEnd gets the response
func (p *outProtocol) WriteMessageEnd() error {
	// The call request has been written completely, close the error channel.
	// TODO(prashant): Deal with errors occurring during Write or in the underlying protocol.
	close(p.errC)
	return nil
}

func (p *outProtocol) ReadMessageBegin() (string, thrift.TMessageType, int32, error) {
	resp := p.call.Response()

	// ReadArg2 has to be called before checking Response.ApplicationError.
	if err := resp.ReadArg2(nullArg{}); err != nil {
		return "", 0, 0, err
	}
	if resp.ApplicationError() {
		// TODO(prashant): Return a better error?
		log.Printf("AppError!")
		return "", 0, 0, errors.New("application error")
	}

	err := p.readArg3(resp)
	return "", thrift.REPLY, p.seqID, err
}

func (p *outProtocol) ReadMessageEnd() error {
	close(p.errC)
	p.call = nil
	return nil
}
