package thrift

// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import (
	"errors"
	"io"
	"log"

	"golang.org/x/net/context"

	"github.com/apache/thrift/lib/go/thrift"
	tchannel "github.com/uber/tchannel/golang"
)

// TChanOutboundOptions are parameters passed to the underlying tchannel when making requests.
type TChanOutboundOptions struct {
	// Context is the context.Context with timeout and deadline information.
	Context context.Context

	// Dst is the host:port of the service to call.
	Dst string

	// AutobahnService is the Autobahn service name.
	AutobahnService string

	// ThriftService is the Thrift service name.
	ThriftService string
}

// outProtocol is a TProtocol that is used to make requests to other servers using Thrift.
type outProtocol struct {
	*protocol

	tchan   *tchannel.Channel
	options *TChanOutboundOptions

	// call is the current call.
	call       *tchannel.OutboundCall
	arg3Writer io.WriteCloser
	arg3Reader io.ReadCloser

	// seqID is thrift's sequence ID, which we store when a call is made, and return on Read.
	// This is a hack to get around the thrift client checking the sequence ID.
	seqID int32
}

// NewTChanOutbound returns a protocol that can used to instantiate a thrift client
// that communicates over tchannel.
// Note: The returned protocol must be used as the input *and* output protocol.
func NewTChanOutbound(tchan *tchannel.Channel, options *TChanOutboundOptions) thrift.TProtocol {
	return &outProtocol{
		protocol: newProtocol(),
		tchan:    tchan,
		options:  options,
	}
}

func (p *outProtocol) beginCall(method string) (*tchannel.OutboundCall, error) {
	opts := p.options
	return p.tchan.BeginCall(opts.Context, opts.Dst, opts.AutobahnService, opts.ThriftService+"::"+method, &tchannel.CallOptions{
		Format: tchannel.Thrift,
	})
}

// WriteMessageBegin begins the outgoing call over Thrift. The underlying binary protocol is not
// called, since the tchannel protocol sends method metadata separately.
func (p *outProtocol) WriteMessageBegin(name string, _ thrift.TMessageType, seqID int32) error {
	var err error

	// Thrift's autogenerated client checks the sequence ID, so we store it in-memory since we don't
	// actually send it over the wire.
	p.seqID = seqID

	if p.call, err = p.beginCall(name); err != nil {
		return err
	}
	writer, err := p.call.Arg2Writer()
	if err != nil {
		return err
	}
	if err := writer.Close(); err != nil {
		return err
	}

	if p.arg3Writer, err = p.call.Arg3Writer(); err != nil {
		return err
	}

	p.transport.Writer = p.arg3Writer
	return nil
}

// WriteMessageEnd gets the response
func (p *outProtocol) WriteMessageEnd() error {
	writer := p.arg3Writer
	p.arg3Writer = nil
	p.transport.Writer = nil
	return writer.Close()
}

func (p *outProtocol) ReadMessageBegin() (string, thrift.TMessageType, int32, error) {
	resp := p.call.Response()

	// ReadArg2 has to be called before checking Response.ApplicationError.
	reader, err := resp.Arg2Reader()
	if err != nil {
		return "", 0, 0, err
	}
	if err := reader.Close(); err != nil {
		return "", 0, 0, err
	}

	if resp.ApplicationError() {
		// TODO(prashant): Return a better error?
		log.Printf("AppError!")
		return "", 0, 0, errors.New("application error")
	}

	if p.arg3Reader, err = resp.Arg3Reader(); err != nil {
		return "", 0, 0, err
	}

	p.transport.Reader = p.arg3Reader
	return "", thrift.CALL, p.seqID, err
}

func (p *outProtocol) ReadMessageEnd() error {
	reader := p.arg3Reader
	p.call = nil
	p.arg3Reader = nil
	p.transport.Reader = nil
	return reader.Close()
}
